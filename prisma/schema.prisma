generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model action_events {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  batch_id        String    @db.Char(36)
  user_id         BigInt    @db.UnsignedBigInt
  name            String    @db.VarChar(255)
  actionable_type String    @db.VarChar(255)
  actionable_id   BigInt    @db.UnsignedBigInt
  target_type     String    @db.VarChar(255)
  target_id       BigInt    @db.UnsignedBigInt
  model_type      String    @db.VarChar(255)
  model_id        BigInt?   @db.UnsignedBigInt
  fields          String    @db.Text
  status          String    @default("running") @db.VarChar(25)
  exception       String    @db.Text
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
  original        String?   @db.MediumText
  changes         String?   @db.MediumText

  @@index([actionable_type, actionable_id], map: "action_events_actionable_type_actionable_id_index")
  @@index([batch_id, model_type, model_id], map: "action_events_batch_id_model_type_model_id_index")
  @@index([target_type, target_id], map: "action_events_target_type_target_id_index")
  @@index([user_id], map: "action_events_user_id_index")
}

model backend_password_resets {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "backend_password_resets_email_index")
}

model backend_users {
  id                BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  name              String           @db.VarChar(255)
  email             String           @unique(map: "backend_users_email_unique") @db.VarChar(255)
  email_verified_at DateTime?        @db.Timestamp(0)
  password          String           @db.VarChar(255)
  remember_token    String?          @db.VarChar(100)
  created_at        DateTime?        @db.Timestamp(0)
  updated_at        DateTime?        @db.Timestamp(0)
  bulk_uploads      bulk_uploads[]
  failed_uploads    failed_uploads[]
}

model bingo_audience_areas {
  id                BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  bingo_audience_id BigInt          @db.UnsignedBigInt
  area_id           String          @db.VarChar(255)
  area_type         String          @db.VarChar(255)
  created_at        DateTime?       @db.Timestamp(0)
  updated_at        DateTime?       @db.Timestamp(0)
  deleted_at        DateTime?       @db.Timestamp(0)
  bingo_audiences   bingo_audiences @relation(fields: [bingo_audience_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bingo_audience_areas_bingo_audience_id_foreign")

  @@index([bingo_audience_id], map: "bingo_audience_areas_bingo_audience_id_foreign")
}

model bingo_audiences {
  id                     BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  bingo_id               BigInt                 @db.UnsignedBigInt
  name                   String                 @db.VarChar(255)
  contact_flex           Json?
  account_flex           Json?
  is_national            Boolean                @default(false)
  sub_region             Json?
  sales_office           Json?
  territory              Json?
  geographic_regions     Json?
  geographic_provinces   Json?
  geographic_territories Json?
  is_active              Boolean                @default(true)
  deleted_at             DateTime?              @db.Timestamp(0)
  created_at             DateTime?              @db.Timestamp(0)
  updated_at             DateTime?              @db.Timestamp(0)
  bingo_audience_areas   bingo_audience_areas[]
  bingos                 bingos                 @relation(fields: [bingo_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bingo_audiences_bingo_id_foreign")
  bingo_card_audiences   bingo_card_audiences[]

  @@index([bingo_id], map: "bingo_audiences_bingo_id_foreign")
}

model bingo_card_audiences {
  id                BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  bingo_card_id     BigInt          @db.UnsignedBigInt
  bingo_audience_id BigInt          @db.UnsignedBigInt
  created_at        DateTime?       @db.Timestamp(0)
  updated_at        DateTime?       @db.Timestamp(0)
  bingo_audiences   bingo_audiences @relation(fields: [bingo_audience_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bingo_card_audiences_bingo_audience_id_foreign")
  bingo_cards       bingo_cards     @relation(fields: [bingo_card_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bingo_card_audiences_bingo_card_id_foreign")

  @@index([bingo_audience_id], map: "bingo_card_audiences_bingo_audience_id_foreign")
  @@index([bingo_card_id], map: "bingo_card_audiences_bingo_card_id_foreign")
}

model bingo_card_transactions {
  id                 BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  user_id            BigInt           @db.UnsignedBigInt
  bingo_id           BigInt           @db.UnsignedBigInt
  bingo_card_id      BigInt           @db.UnsignedBigInt
  upc_transaction_id BigInt           @db.UnsignedBigInt
  created_at         DateTime?        @db.Timestamp(0)
  updated_at         DateTime?        @db.Timestamp(0)
  bingo_cards        bingo_cards      @relation(fields: [bingo_card_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "bingo_card_transactions_bingo_card_id_foreign")
  bingos             bingos           @relation(fields: [bingo_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "bingo_card_transactions_bingo_id_foreign")
  upc_transactions   upc_transactions @relation(fields: [upc_transaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "bingo_card_transactions_upc_transaction_id_foreign")
  users              users            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "bingo_card_transactions_user_id_foreign")

  @@index([bingo_card_id], map: "bingo_card_transactions_bingo_card_id_foreign")
  @@index([bingo_id], map: "bingo_card_transactions_bingo_id_foreign")
  @@index([upc_transaction_id], map: "bingo_card_transactions_upc_transaction_id_foreign")
  @@index([user_id], map: "bingo_card_transactions_user_id_foreign")
}

model bingo_cards {
  id                       BigInt                    @id @default(autoincrement()) @db.UnsignedBigInt
  bingo_id                 BigInt                    @db.UnsignedBigInt
  name                     String                    @db.VarChar(255)
  is_active                Boolean                   @default(true)
  start_date               DateTime                  @db.DateTime(0)
  end_date                 DateTime                  @db.DateTime(0)
  background_color         String?                   @db.VarChar(255)
  card_background          String?                   @db.VarChar(255)
  number_of_cards          Int?
  card_range               String                    @db.VarChar(255)
  award_points             Int                       @db.UnsignedInt
  status_points            Int                       @db.UnsignedInt
  all_audiences            Boolean
  per_tile_counter         Boolean
  randomize_tile_placement Boolean
  created_at               DateTime?                 @db.Timestamp(0)
  updated_at               DateTime?                 @db.Timestamp(0)
  deleted_at               DateTime?                 @db.Timestamp(0)
  bingo_card_audiences     bingo_card_audiences[]
  bingo_card_transactions  bingo_card_transactions[]
  bingos                   bingos                    @relation(fields: [bingo_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bingo_cards_bingo_id_foreign")
  bingo_tiles              bingo_tiles[]
  upc_transactions         upc_transactions[]

  @@index([bingo_id], map: "bingo_cards_bingo_id_foreign")
}

model bingo_tile_user {
  id                   BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  user_id              BigInt      @db.UnsignedBigInt
  bingo_tile_id        BigInt      @db.UnsignedBigInt
  completed_pack_codes Int?        @db.UnsignedInt
  created_at           DateTime?   @db.Timestamp(0)
  updated_at           DateTime?   @db.Timestamp(0)
  bingo_tiles          bingo_tiles @relation(fields: [bingo_tile_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bingo_tile_user_bingo_tile_id_foreign")
  users                users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bingo_tile_user_user_id_foreign")

  @@index([bingo_tile_id], map: "bingo_tile_user_bingo_tile_id_foreign")
  @@index([user_id], map: "bingo_tile_user_user_id_foreign")
}

model bingo_tiles {
  id                   BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  bingo_card_id        BigInt            @db.UnsignedBigInt
  box_number           Int               @db.UnsignedInt
  is_free_tile         Boolean           @default(false)
  product_type         String?           @db.VarChar(255)
  product_id           BigInt?           @db.UnsignedBigInt
  number_of_pack_codes Int?              @db.UnsignedInt
  award_points         Int?              @db.UnsignedInt
  status_points        Int?              @db.UnsignedInt
  created_at           DateTime?         @db.Timestamp(0)
  updated_at           DateTime?         @db.Timestamp(0)
  deleted_at           DateTime?         @db.Timestamp(0)
  bingo_tile_user      bingo_tile_user[]
  bingo_cards          bingo_cards       @relation(fields: [bingo_card_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bingo_tiles_bingo_card_id_foreign")

  @@index([bingo_card_id], map: "bingo_tiles_bingo_card_id_foreign")
  @@index([product_type, product_id], map: "bingo_tiles_product_type_product_id_index")
}

model bingos {
  id                      BigInt                    @id @default(autoincrement()) @db.UnsignedBigInt
  name                    String                    @db.VarChar(255)
  description             String                    @db.VarChar(255)
  is_active               String                    @db.VarChar(255)
  created_at              DateTime?                 @db.Timestamp(0)
  updated_at              DateTime?                 @db.Timestamp(0)
  deleted_at              DateTime?                 @db.Timestamp(0)
  bingo_audiences         bingo_audiences[]
  bingo_card_transactions bingo_card_transactions[]
  bingo_cards             bingo_cards[]
}

model brands {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String    @db.VarChar(255)
  alias      String    @default("") @db.VarChar(255)
  is_active  Boolean
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  skus       skus[]

  @@index([name], map: "brands_name_index")
}

model bulk_uploads {
  id              BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  backend_user_id BigInt           @db.UnsignedBigInt
  description     String           @default("") @db.VarChar(255)
  original_file   String           @default("") @db.VarChar(255)
  meta            Json
  queued_at       DateTime?        @db.Timestamp(0)
  processed_at    DateTime?        @db.Timestamp(0)
  created_at      DateTime?        @db.Timestamp(0)
  updated_at      DateTime?        @db.Timestamp(0)
  backend_users   backend_users    @relation(fields: [backend_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "bulk_uploads_backend_user_id_foreign")
  failed_uploads  failed_uploads[]

  @@index([backend_user_id], map: "bulk_uploads_backend_user_id_foreign")
}

model carousel_models {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  carousel_id BigInt    @db.UnsignedBigInt
  model_type  String    @db.VarChar(255)
  model_id    BigInt    @db.UnsignedBigInt
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  carousels   carousels @relation(fields: [carousel_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "carousel_models_carousel_id_foreign")

  @@index([carousel_id], map: "carousel_models_carousel_id_foreign")
  @@index([model_type, model_id], map: "carousel_models_model_type_model_id_index")
}

model carousels {
  id              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  name            String            @unique(map: "carousels_name_unique") @db.VarChar(255)
  image           String?           @db.VarChar(255)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  carousel_models carousel_models[]
}

model client_users {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String    @db.VarChar(255)
  username   String    @unique(map: "client_users_username_unique") @db.VarChar(255)
  password   String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model downloadables {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  backend_user_id BigInt?   @db.UnsignedBigInt
  description     String?   @db.VarChar(255)
  filepath        String?   @db.VarChar(255)
  meta            Json?
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
}

model exports {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_type       String?   @db.VarChar(255)
  user_id         BigInt?   @db.UnsignedBigInt
  filename        String?   @db.VarChar(255)
  status          String    @default("Pending") @db.VarChar(255)
  processor       String?   @db.VarChar(255)
  file_total_rows BigInt    @default(0)
  started_at      DateTime? @db.Timestamp(0)
  completed_at    DateTime? @db.Timestamp(0)
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)

  @@index([user_type, user_id], map: "exports_user_type_user_id_index")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model failed_point_transactions {
  id            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id       BigInt    @db.UnsignedBigInt
  code          String    @default("") @db.VarChar(255)
  message       String    @db.LongText
  award_points  Int       @default(0) @db.UnsignedInt
  status_points Int       @default(0) @db.UnsignedInt
  description   String    @default("") @db.VarChar(255)
  model_type    String    @db.VarChar(255)
  model_id      BigInt    @db.UnsignedBigInt
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
  users         users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "failed_point_transactions_user_id_foreign")

  @@index([model_type, model_id], map: "failed_point_transactions_model_type_model_id_index")
  @@index([user_id], map: "failed_point_transactions_user_id_foreign")
}

model failed_uploads {
  id              BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  bulk_upload_id  BigInt        @db.UnsignedBigInt
  backend_user_id BigInt        @db.UnsignedBigInt
  description     String?       @db.VarChar(255)
  meta            Json?
  created_at      DateTime?     @db.Timestamp(0)
  updated_at      DateTime?     @db.Timestamp(0)
  backend_users   backend_users @relation(fields: [backend_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "failed_uploads_backend_user_id_foreign")
  bulk_uploads    bulk_uploads  @relation(fields: [bulk_upload_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "failed_uploads_bulk_upload_id_foreign")

  @@index([backend_user_id], map: "failed_uploads_backend_user_id_foreign")
  @@index([bulk_upload_id], map: "failed_uploads_bulk_upload_id_foreign")
}

model geographic_territories {
  id                BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  city              String              @db.VarChar(255)
  province          String              @db.VarChar(255)
  region            String              @db.VarChar(255)
  created_at        DateTime?           @db.Timestamp(0)
  updated_at        DateTime?           @db.Timestamp(0)
  pmftc_territories pmftc_territories[]
}

model hinge_lid_codes {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  sku_id         BigInt    @db.UnsignedBigInt
  hinge_lid_code String    @db.VarChar(255)
  is_active      Boolean
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
  deleted_at     DateTime? @db.Timestamp(0)
  skus           skus      @relation(fields: [sku_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "hinge_lid_codes_sku_id_foreign")

  @@index([hinge_lid_code], map: "hinge_lid_codes_hinge_lid_code_index")
  @@index([sku_id], map: "hinge_lid_codes_sku_id_foreign")
}

model hurdle_transactions {
  id                  BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  user_id             BigInt            @db.UnsignedBigInt
  hurdle_id           BigInt            @db.UnsignedBigInt
  program_mechanic_id BigInt            @db.UnsignedBigInt
  upc_transaction_id  BigInt            @db.UnsignedBigInt
  nth_entry           Int               @default(0) @db.UnsignedInt
  created_at          DateTime?         @db.Timestamp(0)
  updated_at          DateTime?         @db.Timestamp(0)
  hurdles             hurdles           @relation(fields: [hurdle_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "hurdle_transactions_hurdle_id_foreign")
  program_mechanics   program_mechanics @relation(fields: [program_mechanic_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "hurdle_transactions_program_mechanic_id_foreign")
  upc_transactions    upc_transactions  @relation(fields: [upc_transaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "hurdle_transactions_upc_transaction_id_foreign")
  users               users             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "hurdle_transactions_user_id_foreign")

  @@index([hurdle_id], map: "hurdle_transactions_hurdle_id_foreign")
  @@index([program_mechanic_id], map: "hurdle_transactions_program_mechanic_id_foreign")
  @@index([upc_transaction_id], map: "hurdle_transactions_upc_transaction_id_foreign")
  @@index([user_id], map: "hurdle_transactions_user_id_foreign")
}

model hurdles {
  id                  BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  name                String                @db.VarChar(255)
  target              Int                   @db.UnsignedInt
  target_range        String                @db.VarChar(255)
  award_points        Int                   @db.UnsignedInt
  status_points       Int                   @db.UnsignedInt
  is_active           Boolean
  created_at          DateTime?             @db.Timestamp(0)
  updated_at          DateTime?             @db.Timestamp(0)
  deleted_at          DateTime?             @db.Timestamp(0)
  hurdle_transactions hurdle_transactions[]
}

model imports {
  id                   BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_type            String?   @db.VarChar(255)
  user_id              BigInt?   @db.UnsignedBigInt
  filename             String?   @db.VarChar(255)
  status               String    @default("Pending") @db.VarChar(255)
  processor            String?   @db.VarChar(255)
  file_total_rows      BigInt    @default(0)
  total_rows_processed BigInt    @default(0)
  total_rows_failed    BigInt    @default(0)
  started_at           DateTime? @db.Timestamp(0)
  completed_at         DateTime? @db.Timestamp(0)
  created_at           DateTime? @db.Timestamp(0)
  updated_at           DateTime? @db.Timestamp(0)
  meta                 Json?

  @@index([user_type, user_id], map: "imports_user_type_user_id_index")
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String  @db.LongText
  options        String? @db.MediumText
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model learn_mores {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  click_behavior String    @default("redirect") @db.VarChar(255)
  redirect_url   String?   @db.VarChar(255)
  popup_media    String?   @db.VarChar(255)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
}

model lucky_code_sequences {
  id             BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  lucky_code_id  BigInt      @db.UnsignedBigInt
  sequence_level Int
  nth_entry      BigInt      @default(0) @db.UnsignedBigInt
  award_points   Int         @default(0) @db.UnsignedInt
  status_points  Int         @default(0) @db.UnsignedInt
  created_at     DateTime?   @db.Timestamp(0)
  updated_at     DateTime?   @db.Timestamp(0)
  deleted_at     DateTime?   @db.Timestamp(0)
  lucky_codes    lucky_codes @relation(fields: [lucky_code_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "lucky_code_sequences_lucky_code_id_foreign")

  @@index([lucky_code_id], map: "lucky_code_sequences_lucky_code_id_foreign")
  @@index([nth_entry], map: "lucky_code_sequences_nth_entry_index")
  @@index([sequence_level], map: "lucky_code_sequences_sequence_level_index")
}

model lucky_code_transactions {
  id                  BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  user_id             BigInt            @db.UnsignedBigInt
  lucky_code_id       BigInt            @db.UnsignedBigInt
  program_mechanic_id BigInt            @db.UnsignedBigInt
  upc_transaction_id  BigInt            @db.UnsignedBigInt
  sequence_level      Int               @default(0) @db.UnsignedInt
  nth_entry           Int               @default(0) @db.UnsignedInt
  created_at          DateTime?         @db.Timestamp(0)
  updated_at          DateTime?         @db.Timestamp(0)
  lucky_codes         lucky_codes       @relation(fields: [lucky_code_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "lucky_code_transactions_lucky_code_id_foreign")
  program_mechanics   program_mechanics @relation(fields: [program_mechanic_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "lucky_code_transactions_program_mechanic_id_foreign")
  upc_transactions    upc_transactions  @relation(fields: [upc_transaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "lucky_code_transactions_upc_transaction_id_foreign")
  users               users             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "lucky_code_transactions_user_id_foreign")

  @@index([created_at], map: "lucky_code_transactions_created_at_index")
  @@index([lucky_code_id], map: "lucky_code_transactions_lucky_code_id_foreign")
  @@index([nth_entry], map: "lucky_code_transactions_nth_entry_index")
  @@index([program_mechanic_id], map: "lucky_code_transactions_program_mechanic_id_foreign")
  @@index([sequence_level], map: "lucky_code_transactions_sequence_level_index")
  @@index([upc_transaction_id], map: "lucky_code_transactions_upc_transaction_id_foreign")
  @@index([user_id], map: "lucky_code_transactions_user_id_foreign")
}

model lucky_codes {
  id                      BigInt                    @id @default(autoincrement()) @db.UnsignedBigInt
  name                    String                    @db.VarChar(255)
  win_limit               BigInt
  win_limit_range         String                    @db.VarChar(255)
  is_active               Boolean                   @default(false)
  created_at              DateTime?                 @db.Timestamp(0)
  updated_at              DateTime?                 @db.Timestamp(0)
  deleted_at              DateTime?                 @db.Timestamp(0)
  lucky_code_sequences    lucky_code_sequences[]
  lucky_code_transactions lucky_code_transactions[]
}

model media {
  id                    BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  model_type            String    @db.VarChar(255)
  model_id              BigInt    @db.UnsignedBigInt
  uuid                  String?   @unique(map: "media_uuid_unique") @db.Char(36)
  collection_name       String    @db.VarChar(255)
  name                  String    @db.VarChar(255)
  file_name             String    @db.VarChar(255)
  mime_type             String?   @db.VarChar(255)
  disk                  String    @db.VarChar(255)
  conversions_disk      String?   @db.VarChar(255)
  size                  BigInt    @db.UnsignedBigInt
  manipulations         Json
  custom_properties     Json
  generated_conversions Json
  responsive_images     Json
  order_column          Int?      @db.UnsignedInt
  created_at            DateTime? @db.Timestamp(0)
  updated_at            DateTime? @db.Timestamp(0)

  @@index([model_type, model_id], map: "media_model_type_model_id_index")
  @@index([order_column], map: "media_order_column_index")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model model_has_permissions {
  permission_id Int         @db.UnsignedInt
  model_type    String      @db.VarChar(255)
  model_id      BigInt      @db.UnsignedBigInt
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "model_has_permissions_permission_id_foreign")

  @@id([permission_id, model_id, model_type])
  @@index([model_id, model_type], map: "model_has_permissions_model_id_model_type_index")
}

model model_has_roles {
  role_id    Int    @db.UnsignedInt
  model_type String @db.VarChar(255)
  model_id   BigInt @db.UnsignedBigInt
  roles      roles  @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "model_has_roles_role_id_foreign")

  @@id([role_id, model_id, model_type])
  @@index([model_id, model_type], map: "model_has_roles_model_id_model_type_index")
}

model nova_field_attachments {
  id              Int       @id @default(autoincrement()) @db.UnsignedInt
  attachable_type String    @db.VarChar(255)
  attachable_id   BigInt    @db.UnsignedBigInt
  attachment      String    @db.VarChar(255)
  disk            String    @db.VarChar(255)
  url             String    @db.VarChar(255)
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)

  @@index([attachable_type, attachable_id], map: "nova_field_attachments_attachable_type_attachable_id_index")
  @@index([url], map: "nova_field_attachments_url_index")
}

model nova_notifications {
  id              String    @id @db.Char(36)
  type            String    @db.VarChar(255)
  notifiable_type String    @db.VarChar(255)
  notifiable_id   BigInt    @db.UnsignedBigInt
  data            String    @db.Text
  read_at         DateTime? @db.Timestamp(0)
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
  deleted_at      DateTime? @db.Timestamp(0)

  @@index([notifiable_type, notifiable_id], map: "nova_notifications_notifiable_type_notifiable_id_index")
}

model nova_pending_field_attachments {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  draft_id   String    @db.VarChar(255)
  attachment String    @db.VarChar(255)
  disk       String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@index([draft_id], map: "nova_pending_field_attachments_draft_id_index")
}

model nova_settings {
  key   String  @id @db.VarChar(255)
  value String? @db.Text
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model permissions {
  id                    Int                     @id @default(autoincrement()) @db.UnsignedInt
  name                  String                  @db.VarChar(255)
  group                 String                  @db.VarChar(255)
  guard_name            String                  @db.VarChar(255)
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  model_has_permissions model_has_permissions[]
  role_has_permissions  role_has_permissions[]
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model pmftc_territories {
  id                      BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  geographic_territory_id BigInt?                 @db.UnsignedBigInt
  sub_region              String                  @db.VarChar(255)
  territory               String                  @db.VarChar(255)
  sales_office            String                  @db.VarChar(255)
  created_at              DateTime?               @db.Timestamp(0)
  updated_at              DateTime?               @db.Timestamp(0)
  deleted_at              DateTime?               @db.Timestamp(0)
  geographic_territories  geographic_territories? @relation(fields: [geographic_territory_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pmftc_territories_geographic_territory_id_foreign")

  @@index([geographic_territory_id], map: "pmftc_territories_geographic_territory_id_foreign")
  @@index([sales_office], map: "pmftc_territories_sales_office_index")
  @@index([sub_region], map: "pmftc_territories_sub_region_index")
  @@index([territory], map: "pmftc_territories_territory_index")
}

model point_transactions {
  id                     BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                BigInt    @db.UnsignedBigInt
  salesforce_response_id String    @default("") @db.VarChar(255)
  award_points           Int       @default(0) @db.UnsignedInt
  status_points          Int       @default(0) @db.UnsignedInt
  description            String?   @db.VarChar(255)
  model_type             String    @db.VarChar(255)
  model_id               BigInt    @db.UnsignedBigInt
  created_at             DateTime? @db.Timestamp(0)
  updated_at             DateTime? @db.Timestamp(0)
  users                  users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "point_transactions_user_id_foreign")

  @@index([created_at], map: "point_transactions_created_at_index")
  @@index([model_type, model_id], map: "point_transactions_model_type_model_id_index")
  @@index([user_id], map: "point_transactions_user_id_foreign")
}

model pop_up_models {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  pop_up_id  BigInt    @db.UnsignedBigInt
  model_type String    @db.VarChar(255)
  model_id   BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  pop_ups    pop_ups   @relation(fields: [pop_up_id], references: [id], onDelete: Cascade, map: "pop_up_models_pop_up_id_foreign")

  @@index([model_type, model_id], map: "pop_up_models_model_type_model_id_index")
  @@index([pop_up_id], map: "pop_up_models_pop_up_id_foreign")
}

model pop_ups {
  id            BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  name          String          @db.VarChar(255)
  button_text   String          @default("") @db.VarChar(255)
  button_link   String          @default("") @db.VarChar(255)
  created_at    DateTime?       @db.Timestamp(0)
  updated_at    DateTime?       @db.Timestamp(0)
  pop_up_models pop_up_models[]
}

model product_group_items {
  id               BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  product_group_id BigInt         @db.UnsignedBigInt
  item_type        String         @db.VarChar(255)
  item_id          BigInt         @db.UnsignedBigInt
  created_at       DateTime?      @db.Timestamp(0)
  updated_at       DateTime?      @db.Timestamp(0)
  deleted_at       DateTime?      @db.Timestamp(0)
  product_groups   product_groups @relation(fields: [product_group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "product_group_items_product_group_id_foreign")

  @@index([item_type, item_id], map: "product_group_items_item_type_item_id_index")
  @@index([product_group_id], map: "product_group_items_product_group_id_foreign")
}

model product_groups {
  id                  BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  name                String                @db.VarChar(255)
  is_active           Boolean
  created_at          DateTime?             @db.Timestamp(0)
  updated_at          DateTime?             @db.Timestamp(0)
  deleted_at          DateTime?             @db.Timestamp(0)
  product_group_items product_group_items[]
}

model program_audience_areas {
  id                  BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  program_audience_id BigInt            @db.UnsignedBigInt
  area_type           String            @db.VarChar(255)
  area_id             String            @db.VarChar(255)
  created_at          DateTime?         @db.Timestamp(0)
  updated_at          DateTime?         @db.Timestamp(0)
  deleted_at          DateTime?         @db.Timestamp(0)
  program_audiences   program_audiences @relation(fields: [program_audience_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "program_audience_areas_program_audience_id_foreign")

  @@index([area_type, area_id], map: "program_audience_areas_area_type_area_id_index")
  @@index([program_audience_id], map: "program_audience_areas_program_audience_id_foreign")
}

model program_audiences {
  id                         BigInt                       @id @default(autoincrement()) @db.UnsignedBigInt
  program_id                 BigInt?                      @db.UnsignedBigInt
  name                       String                       @db.VarChar(255)
  contact_flex               Json?
  account_flex               Json?
  trade_channel              String?                      @db.VarChar(255)
  trade_category             String?                      @db.VarChar(255)
  is_national                Boolean
  sub_region                 Json?
  sales_office               Json?
  territory                  Json?
  geographic_regions         Json?
  geographic_provinces       Json?
  geographic_territories     Json?
  is_active                  Boolean
  created_at                 DateTime?                    @db.Timestamp(0)
  updated_at                 DateTime?                    @db.Timestamp(0)
  deleted_at                 DateTime?                    @db.Timestamp(0)
  program_audience_areas     program_audience_areas[]
  programs                   programs?                    @relation(fields: [program_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "program_audiences_program_id_foreign")
  program_mechanic_audiences program_mechanic_audiences[]

  @@index([program_id], map: "program_audiences_program_id_foreign")
  @@index([trade_category], map: "program_audiences_trade_category_index")
  @@index([trade_channel], map: "program_audiences_trade_channel_index")
}

model program_mechanic_add_ons {
  id                  BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  program_mechanic_id BigInt            @db.UnsignedBigInt
  model_type          String            @db.VarChar(255)
  model_id            BigInt            @db.UnsignedBigInt
  created_at          DateTime?         @db.Timestamp(0)
  updated_at          DateTime?         @db.Timestamp(0)
  deleted_at          DateTime?         @db.Timestamp(0)
  program_mechanics   program_mechanics @relation(fields: [program_mechanic_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "program_mechanic_add_ons_program_mechanic_id_foreign")

  @@index([model_type, model_id], map: "program_mechanic_add_ons_model_type_model_id_index")
  @@index([program_mechanic_id], map: "program_mechanic_add_ons_program_mechanic_id_foreign")
}

model program_mechanic_audiences {
  id                  BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  program_mechanic_id BigInt            @db.UnsignedBigInt
  program_audience_id BigInt            @db.UnsignedBigInt
  created_at          DateTime?         @db.Timestamp(0)
  updated_at          DateTime?         @db.Timestamp(0)
  deleted_at          DateTime?         @db.Timestamp(0)
  program_audiences   program_audiences @relation(fields: [program_audience_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "program_mechanic_audiences_program_audience_id_foreign")
  program_mechanics   program_mechanics @relation(fields: [program_mechanic_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "program_mechanic_audiences_program_mechanic_id_foreign")

  @@index([program_audience_id], map: "program_mechanic_audiences_program_audience_id_foreign")
  @@index([program_mechanic_id], map: "program_mechanic_audiences_program_mechanic_id_foreign")
}

model program_mechanics {
  id                            BigInt                       @id @default(autoincrement()) @db.UnsignedBigInt
  program_id                    BigInt?                      @db.UnsignedBigInt
  product_type                  String                       @db.VarChar(255)
  product_id                    BigInt                       @db.UnsignedBigInt
  priority                      Int?                         @db.UnsignedInt
  name                          String                       @default("") @db.VarChar(255)
  start_at                      DateTime                     @db.Timestamp(0)
  end_at                        DateTime                     @db.Timestamp(0)
  cap                           Int                          @db.UnsignedInt
  cap_range                     String                       @db.VarChar(255)
  award_points                  Int                          @db.UnsignedInt
  status_points                 Int                          @db.UnsignedInt
  upc_transactions_count        Int                          @default(0) @db.UnsignedInt
  lucky_code_transactions_count Int                          @default(0) @db.UnsignedInt
  hurdle_transactions_count     Int                          @default(0) @db.UnsignedInt
  raffle_entries                Int                          @db.UnsignedInt
  is_active                     Boolean
  all_audiences                 Boolean
  is_custom_text_enabled        Boolean                      @default(false)
  custom_text                   String                       @default("") @db.VarChar(255)
  created_at                    DateTime?                    @db.Timestamp(0)
  updated_at                    DateTime?                    @db.Timestamp(0)
  deleted_at                    DateTime?                    @db.Timestamp(0)
  hurdle_transactions           hurdle_transactions[]
  lucky_code_transactions       lucky_code_transactions[]
  program_mechanic_add_ons      program_mechanic_add_ons[]
  program_mechanic_audiences    program_mechanic_audiences[]
  programs                      programs?                    @relation(fields: [program_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "program_mechanics_program_id_foreign")
  upc_transactions              upc_transactions[]

  @@index([end_at], map: "program_mechanics_end_at_index")
  @@index([product_type, product_id], map: "program_mechanics_product_type_product_id_index")
  @@index([program_id], map: "program_mechanics_program_id_foreign")
  @@index([start_at], map: "program_mechanics_start_at_index")
}

model program_raffles {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  program_id  BigInt?   @db.UnsignedBigInt
  name        String    @default("") @db.VarChar(255)
  description String    @default("") @db.VarChar(1000)
  is_active   Boolean
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  deleted_at  DateTime? @db.Timestamp(0)
  programs    programs? @relation(fields: [program_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "program_raffles_program_id_foreign")

  @@index([program_id], map: "program_raffles_program_id_foreign")
}

model programs {
  id                BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  name              String              @db.VarChar(255)
  description       String              @db.VarChar(255)
  is_active         Boolean             @default(false)
  created_at        DateTime?           @db.Timestamp(0)
  updated_at        DateTime?           @db.Timestamp(0)
  deleted_at        DateTime?           @db.Timestamp(0)
  program_audiences program_audiences[]
  program_mechanics program_mechanics[]
  program_raffles   program_raffles[]
  raffle_entries    raffle_entries[]
  raffles           raffles[]
}

model raffle_entries {
  id               BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id          BigInt    @db.UnsignedBigInt
  program_id       BigInt    @db.UnsignedBigInt
  entries_count    Int       @db.UnsignedInt
  transaction_type String    @db.VarChar(255)
  transaction_id   BigInt    @db.UnsignedBigInt
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  deleted_at       DateTime? @db.Timestamp(0)
  programs         programs  @relation(fields: [program_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "raffle_entries_program_id_foreign")
  users            users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "raffle_entries_user_id_foreign")

  @@index([program_id], map: "raffle_entries_program_id_foreign")
  @@index([transaction_type, transaction_id], map: "raffle_entries_transaction_type_transaction_id_index")
  @@index([user_id], map: "raffle_entries_user_id_foreign")
}

model raffles {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  program_id  BigInt    @db.UnsignedBigInt
  name        String    @default("") @db.VarChar(255)
  description String    @default("") @db.VarChar(1000)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  deleted_at  DateTime? @db.Timestamp(0)
  programs    programs  @relation(fields: [program_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "raffles_program_id_foreign")

  @@index([program_id], map: "raffles_program_id_foreign")
}

model role_has_permissions {
  permission_id Int         @db.UnsignedInt
  role_id       Int         @db.UnsignedInt
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_has_permissions_permission_id_foreign")
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_has_permissions_role_id_foreign")

  @@id([permission_id, role_id])
  @@index([role_id], map: "role_has_permissions_role_id_foreign")
}

model roles {
  id                   Int                    @id @default(autoincrement()) @db.UnsignedInt
  name                 String                 @db.VarChar(255)
  guard_name           String                 @db.VarChar(255)
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  model_has_roles      model_has_roles[]
  role_has_permissions role_has_permissions[]
}

model skus {
  id              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  brand_id        BigInt?           @db.UnsignedBigInt
  sku             String            @db.VarChar(255)
  alias           String            @default("") @db.VarChar(255)
  is_active       Boolean
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  deleted_at      DateTime?         @db.Timestamp(0)
  hinge_lid_codes hinge_lid_codes[]
  brands          brands?           @relation(fields: [brand_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "skus_brand_id_foreign")

  @@index([brand_id], map: "skus_brand_id_foreign")
  @@index([sku], map: "skus_sku_index")
}

model territories {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  area_id        BigInt    @db.UnsignedBigInt
  territory_id   BigInt    @db.UnsignedBigInt
  territory_type String    @db.VarChar(255)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([area_id], map: "territories_area_id_foreign")
}

model textract_logs {
  id            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id       BigInt    @db.UnsignedBigInt
  detected_text String    @default("") @db.VarChar(255)
  confidence    Decimal   @default(0.00) @db.Decimal(10, 2)
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
  users         users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "textract_logs_user_id_foreign")

  @@index([user_id], map: "textract_logs_user_id_foreign")
}

model upc_transactions {
  id                      BigInt                    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                 BigInt                    @db.UnsignedBigInt
  program_mechanic_id     BigInt?                   @db.UnsignedBigInt
  bingo_card_id           BigInt?                   @db.UnsignedBigInt
  code                    String                    @default("") @db.VarChar(255)
  pack_item               String                    @default("") @db.VarChar(255)
  brand_differentiator    String                    @default("") @db.VarChar(255)
  brand_family            String                    @default("") @db.VarChar(255)
  status                  String                    @default("") @db.VarChar(255)
  created_at              DateTime?                 @db.Timestamp(0)
  updated_at              DateTime?                 @db.Timestamp(0)
  bingo_card_transactions bingo_card_transactions[]
  hurdle_transactions     hurdle_transactions[]
  lucky_code_transactions lucky_code_transactions[]
  bingo_cards             bingo_cards?              @relation(fields: [bingo_card_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "upc_transactions_bingo_card_id_foreign")
  program_mechanics       program_mechanics?        @relation(fields: [program_mechanic_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "upc_transactions_program_mechanic_id_foreign")
  users                   users                     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "upc_transactions_user_id_foreign")

  @@index([bingo_card_id], map: "upc_transactions_bingo_card_id_foreign")
  @@index([brand_differentiator], map: "upc_transactions_brand_differentiator_index")
  @@index([brand_family], map: "upc_transactions_brand_family_index")
  @@index([code], map: "upc_transactions_code_index")
  @@index([created_at], map: "upc_transactions_created_at_index")
  @@index([pack_item], map: "upc_transactions_pack_item_index")
  @@index([program_mechanic_id], map: "upc_transactions_program_mechanic_id_foreign")
  @@index([status], map: "upc_transactions_status_index")
  @@index([user_id], map: "upc_transactions_user_id_foreign")
}

model users {
  id                        BigInt                      @id @default(autoincrement()) @db.UnsignedBigInt
  salesforce_user_id        String                      @default("") @db.VarChar(255)
  salesforce_contact_id     String?                     @db.VarChar(255)
  account_number            String                      @default("") @db.VarChar(255)
  territory                 String                      @default("") @db.VarChar(255)
  contact_flex              Json
  account_flex              Json
  created_at                DateTime?                   @db.Timestamp(0)
  updated_at                DateTime?                   @db.Timestamp(0)
  deleted_at                DateTime?                   @db.Timestamp(0)
  bingo_card_transactions   bingo_card_transactions[]
  bingo_tile_user           bingo_tile_user[]
  failed_point_transactions failed_point_transactions[]
  hurdle_transactions       hurdle_transactions[]
  lucky_code_transactions   lucky_code_transactions[]
  point_transactions        point_transactions[]
  raffle_entries            raffle_entries[]
  textract_logs             textract_logs[]
  upc_transactions          upc_transactions[]

  @@index([account_number], map: "users_account_number_index")
  @@index([salesforce_user_id], map: "users_contact_id_index")
  @@index([salesforce_contact_id], map: "users_salesforce_contact_id_index")
  @@index([salesforce_user_id], map: "users_salesforce_user_id_index")
  @@index([territory], map: "users_territory_index")
}
